// Generated by CoffeeScript 1.3.3
/*
Handy utility functions.
You're welcome.

david@momentum.io
*/

var Util,
  __hasProp = {}.hasOwnProperty;

Util = (function() {

  Util.mount = 'util';

  Util.events = ['DOM_READY'];

  function Util() {
    var _this = this;
    this._state = {
      active: null,
      init: false,
      dom_status: null,
      dom_ready: false,
      queues: {
        fx: [],
        dom: [],
        deferred: [],
        ready: [],
        "default": []
      },
      counts: {
        fx: 0,
        dom: 0,
        deferred: 0,
        ready: 0,
        "default": 0
      },
      handlers: {
        "default": function(q) {
          console.log('Default queue handler called on Util, returning queue: ', q);
          return q;
        },
        ready: function(e) {
          if (document.readyState = 'complete') {
            document.removeEventListener('DOMContentLoaded', _this._state.handlers.ready, false);
            _this._state.dom_ready = true;
            _this._state.dom_status = 'READY';
            return $.apptools.events.trigger('DOM_READY');
          }
        }
      },
      callbacks: {
        "default": null
      }
    };
    this.internal = {
      queues: {
        create: function(name, fn, callback_type) {
          if (callback_type == null) {
            callback_type = 'handler';
          }
          callback_type += 's';
          _this._state.queues[name] = [];
          _this._state.counts[name] = 0;
          _this._state[callback_type][name] = fn;
        },
        remove: function(name, callback) {
          var handler, q, response;
          handler = _this._state.handlers[name];
          delete _this._state.handlers[name];
          q = _this._state.queues[name];
          delete _this._state.queues[name];
          response = q.length > 0 ? {
            queue: q,
            handler: handler
          } : true;
          if (callback != null) {
            return callback(response);
          } else {
            return response;
          }
        },
        add: function(name, item) {
          if (!(item != null)) {
            item = name;
            name = 'default';
          }
          _this._state.queues[name].push(item);
          return _this._state.counts[name]++;
        },
        set_handler: function(name, handler) {
          return _this._state.handlers[name] = handler;
        },
        set_callback: function(name, callback) {
          return _this._state.callbacks[name] = callback;
        },
        go: function(name, q_or_item) {
          var item, q;
          _this._state.counts[name]--;
          if (_this._state.handlers[name] && _this.is_array(q_or_item)) {
            q = q_or_item;
            return _this._state.handlers[name](q);
          } else if (_this._state.callbacks[name]) {
            item = q_or_item;
            return _this._state.callbacks[name](item);
          } else {
            if (_this.is_function(q_or_item)) {
              return q_or_item.call(window, window);
            } else {
              return q_or_item;
            }
          }
        },
        process: function(name) {
          var q, results, _i, _len, _q;
          q = _this._state.queues[name];
          _this._state.queues[name] = [];
          results = [];
          for (_i = 0, _len = q.length; _i < _len; _i++) {
            _q = q[_i];
            results.push(_this.internal.queues.go(name, _q));
          }
          return results;
        }
      }
    };
    this.is = function(thing) {
      return !_this.in_array([false, null, NaN, void 0, 0, {}, [], '', 'false', 'False', 'null', 'NaN', 'undefined', '0', 'none', 'None'], thing);
    };
    this.is_function = function(object) {
      return typeof object === 'function';
    };
    this.is_object = function(object) {
      return typeof object === 'object';
    };
    this.is_raw_object = function(object) {
      if (!object || typeof object !== 'object' || object.nodeType || _this.is_window(object)) {
        return false;
      }
      if ((object.constructor != null) && !object.hasOwnProperty('constructor') && !object.constructor.prototype.hasOwnProperty('isPrototypeOf')) {
        return false;
      }
      return true;
    };
    this.is_empty_object = function(object) {
      var key;
      for (key in object) {
        return false;
      }
      return true;
    };
    this.is_window = function(object) {
      return typeof object === 'object' && (!!~_this.indexOf(object.constructor.prototype, 'setInterval') || ((object.self != null) && object.self === object) || ((typeof Window !== "undefined" && Window !== null) && object instanceof Window));
    };
    this.is_body = function(object) {
      return _this.is_object(object) && (Object.prototype.toString.call(object) === '[object HTMLBodyElement]' || object.constructor.name === 'HTMLBodyElement');
    };
    this.is_array = Array.isArray || function(object) {
      return typeof object === 'array' || Object.prototype.toString.call(object) === '[object Array]' || object.constructor.name === 'Array';
    };
    this.is_string = function(str) {
      return str.constructor.name === 'String' || (str.charAt && str.length);
    };
    this.in_array = function(array, item) {
      return !!~_this.indexOf(array, item);
    };
    this.to_array = function(node_or_token_list) {
      var array;
      array = [];
      for (i = node_or_token_list.length; i--; array.unshift(node_or_token_list[i]));

      return array;
    };
    this.indexOf = function(arr, item) {
      var i, key, result, val, _i;
      if (_this.is_array(arr)) {
        if ((_i = Array.prototype.indexOf) != null) {
          return _i.call(arr, item);
        } else {
          i = arr.length;
          while (i--) {
            if (arr[i] === item) {
              return i;
            }
          }
          return -1;
        }
      } else if (_this.is_object(arr)) {
        result = -1;
        for (key in arr) {
          if (!__hasProp.call(arr, key)) continue;
          val = arr[key];
          if (val !== item) {
            continue;
          }
          result = key;
          break;
        }
        return result;
      } else {
        throw 'indexOf() requires an iterable as the first parameter';
      }
    };
    this.each = function(arr, fn, ctx) {
      var i, item, k, results, val, _e, _i, _len;
      if (ctx == null) {
        ctx = window;
      }
      if (typeof fn !== 'function') {
        throw 'each() requires an iterator as the second parameter';
      } else {
        results = [];
        if (_this.is_array(arr)) {
          if ((_e = Array.prototype.forEach) != null) {
            return _e.call(arr, fn, ctx);
          }
          for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
            item = arr[i];
            results.push(fn.call(ctx, item, i, arr));
          }
        } else if (_this.is_object(arr)) {
          for (k in arr) {
            val = arr[k];
            results.push(fn.call(ctx, val, k, arr));
          }
        } else {
          throw 'each() requires an iterable as the first parameter';
        }
      }
    };
    this.map = function(arr, fn, ctx) {
      var i, item, k, results, val, _i, _len, _m;
      if (ctx == null) {
        ctx = window;
      }
      if (typeof fn !== 'function') {
        throw 'map() requires an iterator as the second parameter';
      } else {
        if (_this.is_array(arr)) {
          if ((_m = Array.prototype.map) != null) {
            return _m.call(arr, fn, ctx);
          }
          results = [];
          for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
            item = arr[i];
            results.push(fn.call(ctx, item, i, arr));
          }
        } else if (_this.is_object(arr)) {
          results = {};
          for (k in arr) {
            if (!__hasProp.call(arr, k)) continue;
            val = arr[k];
            results[k] = fn.call(ctx, val, k, arr);
          }
        } else {
          throw 'map() requires an iterable as the first parameter';
        }
        return results;
      }
    };
    this.filter = function(arr, fn, ctx) {
      var i, item, k, results, val, _f, _i, _len;
      if (ctx == null) {
        ctx = window;
      }
      if (typeof fn !== 'function') {
        throw 'filter() requires an iterator as the second parameter';
      } else {
        if (_this.is_array(arr)) {
          if ((_f = Array.prototype.filter) != null) {
            return _f.call(arr, fn, ctx);
          }
          results = [];
          for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
            item = arr[i];
            if (fn.call(ctx, item, i, arr)) {
              results.push(item);
            }
          }
        } else if (_this.is_object(arr)) {
          results = {};
          for (k in arr) {
            if (!__hasProp.call(arr, k)) continue;
            val = arr[k];
            if (fn.call(ctx, val, k, arr)) {
              results[k] = val;
            }
          }
        } else {
          throw 'filter() requires an iterable as the first parameter';
        }
        return results;
      }
    };
    this.reject = function(arr, fn, ctx) {
      var i, item, k, results, val, _i, _len;
      if (ctx == null) {
        ctx = window;
      }
      if (typeof fn !== 'function') {
        throw 'reject() requires an iterator as the second parameter';
      } else {
        if (_this.is_array(arr)) {
          results = [];
          for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
            item = arr[i];
            if (!fn.call(ctx, item, i, arr)) {
              results.push(item);
            }
          }
        } else if (_this.is_object(arr)) {
          results = {};
          for (k in arr) {
            if (!__hasProp.call(arr, k)) continue;
            val = arr[k];
            if (!fn.call(ctx, val, k, arr)) {
              results[k] = val;
            }
          }
        } else {
          throw 'reject() requires an iterable as the first parameter';
        }
        return results;
      }
    };
    this.exclude = function(array, excludes) {
      var item, k, results, v, _i, _len;
      if (_this.is_array(array)) {
        results = [];
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          item = array[_i];
          if (!!!~_this.indexOf(excludes, item)) {
            results.push(item);
          }
        }
      } else if (_this.is_object(array)) {
        results = {};
        for (k in array) {
          v = array[k];
          if (!!!~_this.indexOf(excludes, k)) {
            results[k] = v;
          }
        }
      } else {
        throw 'exclude() requires two iterables';
      }
      return results;
    };
    this.all = function(arr, fn, ctx) {
      var key, results, _all, _arr, _obj, _results;
      if (ctx == null) {
        ctx = window;
      }
      if (typeof fn !== 'function') {
        throw 'all() requires an iterator as the second parameter';
      } else {
        if ((_arr = _this.is_array(arr)) || (_obj = _this.is_object(arr))) {
          if (_arr) {
            if ((_all = Array.prototype.every) != null) {
              return _all.call(arr, fn, ctx);
            }
          }
          results = _this.reject(arr, fn, ctx);
          if (_arr) {
            return results.length === 0;
          } else {
            _results = [];
            for (key in _obj) {
              _results.push(false);
            }
            return _results;
          }
        } else {
          throw 'all() requires an iterable as the first parameter';
        }
      }
    };
    this.any = function(arr, fn, ctx) {
      var key, results, _any, _arr, _obj, _results;
      if (ctx == null) {
        ctx = window;
      }
      if (typeof fn !== 'function') {
        throw 'any() requires an iterator as the second parameter';
      } else {
        if ((_arr = _this.is_array(arr)) || (_obj = _this.is_object(arr))) {
          if (_arr) {
            if ((_any = Array.prototype.some) != null) {
              return _any.call(arr, fn, ctx);
            }
          }
          results = _this.filter(arr, fn, ctx);
          if (_arr) {
            return results.length > 0;
          } else {
            _results = [];
            for (key in _obj) {
              _results.push(true);
            }
            return _results;
          }
        } else {
          throw 'any() requires an iterable as the first parameter';
        }
      }
    };
    this.reduce = function(arr, fn, initial, ctx) {
      var item, results, _i, _len, _r;
      if (ctx == null) {
        ctx = window;
      }
      if (initial == null) {
        initial = _this.is_array(arr[0]) ? [] : 0;
      }
      if (typeof fn !== 'function') {
        throw 'reduce() requires an iterator as the second parameter';
      } else {
        if (_this.is_array(arr)) {
          if ((_r = Array.prototype.reduce) != null) {
            return _r.call(arr, fn, initial, ctx);
          }
          results = initial;
          for (_i = 0, _len = arr.length; _i < _len; _i++) {
            item = arr[_i];
            fn.call(ctx, results, item, arr);
          }
          return results;
        } else {
          throw 'reduce() requires an array as the first parameter';
        }
      }
    };
    this.reduce_right = function(arr, fn, initial, ctx) {
      var last;
      if (ctx == null) {
        ctx = window;
      }
      if (initial == null) {
        initial = _this.is_array(arr[last = arr.length - 1]) ? [] : 0;
      }
      if (typeof fn !== 'function') {
        throw 'reduce_right() requires an iterator as the second parameter';
      } else {
        if (_this.is_array(arr)) {
          return _this.reduce(arr.reverse(), fn, initial, ctx);
        } else {
          throw 'reduce_right() requires an array as the first parameter';
        }
      }
    };
    this.sort = function(arr, fn) {
      var _s;
      if ((fn != null) && typeof fn !== 'function') {
        throw 'sort() requires an iterator as the second parameter';
      } else if ((_s = Array.prototype.sort) != null) {
        return _s.call(arr, fn);
      } else {
        console.log('non-native sort() currently stubbed.');
        return false;
      }
    };
    this.defaults = function(obj, def_obj) {
      var i, k, new_obj, o, v, _i, _len;
      if (def_obj == null) {
        def_obj = {};
      }
      new_obj = obj;
      if (_this.is_array(obj)) {
        for (i = _i = 0, _len = obj.length; _i < _len; i = ++_i) {
          o = obj[i];
          if (!(o != null)) {
            new_obj[i] = def_obj[i];
          }
        }
      } else if (_this.is_object(obj)) {
        for (k in obj) {
          v = obj[k];
          if (!(v != null)) {
            new_obj[k] = def_obj[k];
          }
        }
      } else {
        throw 'Defaults requires an iterable as the first param.';
      }
      return new_obj;
    };
    this.first = function(array) {
      var arr;
      arr = array;
      return arr.shift();
    };
    this.last = function(array) {
      var arr;
      arr = array;
      return arr.pop();
    };
    this.purge = function(array) {
      return _this.filter(array, function(it) {
        return _this.is(it);
      });
    };
    this.empties = function(array) {
      var idxs;
      idxs = [];
      _.each(array, function(it, i) {
        if (!_this.is(it)) {
          idxs.push(i);
        }
      });
      return idxs;
    };
    this.create_element_string = function(tag, attrs, separator, ext) {
      var el_str, k, no_close, v;
      if (separator == null) {
        separator = '*';
      }
      no_close = ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'link'];
      tag = tag.toLowerCase();
      el_str = '<' + tag;
      for (k in attrs) {
        v = attrs[k];
        el_str += ' ' + k + '="' + v + '"';
      }
      if (ext != null) {
        el_str += ' ' + ext;
      }
      el_str += '>';
      if (!_this.in_array(no_close, tag)) {
        el_str += separator + '</' + tag + '>';
      }
      return el_str;
    };
    this.create_doc_frag = function() {
      var arg, frag, html_string, range, _i, _len;
      html_string = '';
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arg = arguments[_i];
        html_string += arg;
      }
      range = document.createRange();
      range.selectNode(document.getElementsByTagName('div').item(0));
      frag = range.createContextualFragment(html_string);
      return frag;
    };
    this.to_doc_frag = function(node) {
      var frag;
      frag = document.createDocumentFragment();
      frag.appendChild(node);
      return frag;
    };
    this.add = function(element_type, attrs, parent_node) {
      var handler, node_id, q_name;
      if (parent_node == null) {
        parent_node = document.body;
      }
      if (!(element_type != null) || !_this.is_object(attrs)) {
        return false;
      }
      handler = _this.debounce(function(response) {
        var args, dfrag, html, parent, q, _i, _len;
        q = response;
        parent = parent_node;
        html = [];
        for (_i = 0, _len = q.length; _i < _len; _i++) {
          args = q[_i];
          html.push(_this.create_element_string.apply(_this, args));
        }
        dfrag = _this.create_doc_frag(html.join(''));
        return parent.appendChild(dfrag);
      }, 500, false);
      q_name = _this.is_body(parent_node) || !(parent_node != null) || !(node_id = parent_node.getAttribute('id')) ? 'dom' : node_id;
      if (!(_this._state.queues[q_name] != null)) {
        _this.internal.queues.create(q_name, {
          handler: handler
        });
      } else if (!(_this._state.handlers[q_name] != null)) {
        _this.internal.queues.add_handler(q_name, handler);
      }
      _this.internal.queues.add(q_name, [element_type, attrs]);
      return _this.internal.queues.process(q_name);
    };
    this.remove = function(node) {
      return node.parentNode.removeChild(node);
    };
    this.get = function(query, node) {
      var cls, id, selector, tg, _ref;
      if (node == null) {
        node = document;
      }
      if (_this.is_window(node)) {
        node = document;
      }
      if (!(query != null) || query.nodeType) {
        return query;
      }
      if (_this.in_array(['.', '#'], query[0])) {
        _ref = [query[0], query.slice(1)], selector = _ref[0], query = _ref[1];
        return (selector === '#' ? document.getElementById(query) : _this.to_array(node.getElementsByClassName(query)));
      } else {
        if ((id = document.getElementById(query)) != null) {
          return id;
        }
        if ((cls = node.getElementsByClassName(query)).length > 0) {
          return (cls.length > 1 ? _this.to_array(cls) : cls[0]);
        }
        if ((tg = node.getElementsByTagName(query)).length > 0) {
          return (tg.length > 1 ? _this.to_array(tg) : tg[0]);
        }
        return null;
      }
    };
    this.get_offset = function(elem) {
      var offL, offT;
      offL = offT = 0;
      while (true) {
        offL += elem.offsetLeft;
        offT += elem.offsetTop;
        if (!(elem = elem.offsetParent)) {
          break;
        }
      }
      return {
        left: offL,
        top: offT
      };
    };
    this.has_class = function(element, cls) {
      var _ref;
      return ((_ref = element.classList) != null ? typeof _ref.contains === "function" ? _ref.contains(cls) : void 0 : void 0) || element.className && new RegExp('\\s*' + cls + '\\s*').test(element.className);
    };
    this.is_id = function(str) {
      if (str.charAt(0) === '#') {
        return true;
      }
      if (document.getElementById(str) !== null) {
        return true;
      }
      return false;
    };
    this.is_child = function(parent, child) {
      var result, results;
      result = false;
      if (_this.is_array(child)) {
        results = _.reject(_.map(child, function(ch) {
          return _this.is_child(parent, ch);
        }), function(r) {
          return r;
        });
        result = results.length === 0;
      } else {
        while (child = child.parentNode) {
          if (child !== parent) {
            continue;
          }
          result = true;
          break;
        }
      }
      return result;
    };
    this.resolve_common_ancestor = function(elem1, elem2, bound_elem) {
      var go1, go2, match, searched_elems;
      if (bound_elem == null) {
        bound_elem = document.body;
      }
      if (!_this.is_child(bound_elem, [elem1, elem2])) {
        throw 'Bounding node must contain both search elements';
      } else {
        searched_elems = [];
        match = null;
        go1 = true;
        go2 = true;
        while (go1 || go2) {
          if (go1) {
            if (_this.in_array(searched_elems, elem1)) {
              match = elem1;
              break;
            } else {
              searched_elems.push(elem1);
              go1 = (elem1 !== bound_elem) && (elem1 = elem1.parentNode) && (elem1 != null);
            }
          }
          if (go2) {
            if (_this.in_array(searched_elems, elem2)) {
              match = elem2;
              break;
            } else {
              searched_elems.push(elem2);
              go2 = (elem2 !== bound_elem) && (elem2 = elem2.parentNode) && (elem2 != null);
            }
          }
          continue;
        }
        return match;
      }
    };
    this.bind = function(element, event, fn, prop) {
      var a, el, ev, k, v, _i, _j, _len, _len1, _ref;
      if (prop == null) {
        prop = false;
      }
      if (!(element != null) || !(event != null)) {
        return false;
      }
      if (_this.is_window(element) || element.nodeType || ((a = _this.is_array(element)) && element.length > 0 && element[0].nodeType)) {
        if (_this.is_raw_object(event)) {
          for (k in event) {
            v = event[k];
            element.addEventListener(k, v, prop);
          }
          return;
        }
        if (a) {
          if (!_this.is_array(event)) {
            event = [event];
          }
          for (_i = 0, _len = event.length; _i < _len; _i++) {
            ev = event[_i];
            for (_j = 0, _len1 = element.length; _j < _len1; _j++) {
              el = element[_j];
              el.addEventListener(ev, fn, prop);
            }
          }
        } else {
          return element.addEventListener(event, fn, prop);
        }
      } else {
        _ref = [element, event, fn], event = _ref[0], fn = _ref[1], prop = _ref[2];
        return (_this.is_function(fn) ? $.apptools.events.hook(event, fn, prop) : $.apptools.events.bridge(event, fn, prop));
      }
    };
    this.bridge = function() {
      return _this.bind.apply(_this, arguments);
    };
    this.trigger = function() {
      return $.apptools.events.trigger.apply($.apptools.events, arguments);
    };
    this.unbind = function(element, event) {
      var el, ev, evt, _el, _i, _j, _len, _len1;
      if (!(element != null)) {
        return false;
      }
      if (_this.is_array(element)) {
        for (_i = 0, _len = element.length; _i < _len; _i++) {
          el = element[_i];
          _this.unbind(el, event);
        }
      } else if (_this.is_array(event)) {
        for (_j = 0, _len1 = event.length; _j < _len1; _j++) {
          ev = event[_j];
          _this.unbind(element, ev);
        }
      } else if (_this.is_raw_object(element)) {
        for (_el in element) {
          evt = element[_el];
          _this.unbind(_el, evt);
        }
      } else if (element.constructor.name === 'NodeList') {
        return _this.unbind(_this.to_array(element), event);
      } else {
        return element.removeEventListener(event);
      }
    };
    this.block = function(async_method, object) {
      var result, _done;
      if (object == null) {
        object = {};
      }
      console.log('[Util]', 'Enforcing blocking at user request... :(');
      _done = false;
      result = null;
      async_method(object, function(x) {
        result = x;
        return _done = true;
      });
      while (true) {
        if (_done !== false) {
          break;
        }
      }
      return result;
    };
    this.defer = function(fn, timeout) {
      var t;
      if (timeout == null) {
        timeout = false;
      }
      if (typeof fn === 'boolean') {
        return _this.ready(fn);
      } else if (!_this.is(t = parseInt(timeout))) {
        return false;
      } else {
        return setTimeout(fn, t);
      }
    };
    this.ready = function(fn) {
      if (!(_this._state.dom_status != null)) {
        _this._state.dom_status = 'NOT_READY';
        _this.bind('DOM_READY', _this.ready);
        document.addEventListener('DOMContentLoaded', _this._state.handlers.ready, false);
      }
      if (!(fn != null) && _this._state.dom_ready) {
        return _this.internal.queues.process('ready');
      } else if (_this.is_function(fn)) {
        _this.internal.queues.add('ready', fn);
        if (document.readyState === 'complete' && _this._state.dom_ready === true) {
          return _this.defer(_this.ready, 1);
        } else {

        }
      }
    };
    this.now = function() {
      return +new Date();
    };
    this.timestamp = function(d) {
      if (d == null) {
        d = new Date();
      }
      return [[d.getMonth() + 1, d.getDate(), d.getFullYear()].join('-'), [d.getHours(), d.getMinutes(), d.getSeconds()].join(':')].join(' ');
    };
    this.prep_animation = function(t, e, c) {
      var options;
      options = !(t != null) ? {
        duration: 400
      } : (t != null) && _this.is_object(t) ? _this.extend({}, t) : {
        complete: c || (!c && e) || (_this.is_function(t) && t),
        duration: t,
        easing: (c && e) || (e && !is_function(e))
      };
      return options;
    };
    this.throttle = function(fn, buffer, prefire) {
      var last, timer_id;
      if (prefire == null) {
        prefire = false;
      }
      timer_id = null;
      last = 0;
      return function() {
        var args, clear, elapsed, go;
        args = arguments;
        elapsed = _this.now() - last;
        clear = function() {
          go();
          return timer_id = null;
        };
        go = function() {
          last = _this.now();
          return fn.apply(_this, args);
        };
        if (prefire && !timer_id) {
          go();
        }
        if (!!timer_id) {
          clearTimeout(timer_id);
        }
        if (!prefire && elapsed >= buffer) {
          return go();
        } else {
          return timer_id = setTimeout((prefire ? clear : go), !prefire ? buffer - elapsed : buffer);
        }
      };
    };
    this.debounce = function(fn, buffer, prefire) {
      if (buffer == null) {
        buffer = 200;
      }
      if (prefire == null) {
        prefire = false;
      }
      return this.throttle(fn, buffer, prefire);
    };
    this.currency = function(num) {
      var char, index, len, new_nums, nums, process, _i, _len;
      len = (nums = String(num).split('').reverse()).length;
      new_nums = [];
      process = function(c, i) {
        var sym;
        if ((i + 1) % 3 === 0 && len - i > 1) {
          sym = ',';
        } else if (i === len - 1) {
          sym = '$';
        } else {
          sym = '';
        }
        return new_nums.unshift(sym + c);
      };
      for (index = _i = 0, _len = nums.length; _i < _len; index = ++_i) {
        char = nums[index];
        process(char, index);
      }
      return new_nums.join('');
    };
    this.extend = function() {
      var a, arg, args, clone, copied_src, deep, i, key, len, o, object, src, target, value, _i, _len;
      target = arguments[0] || {};
      i = 1;
      deep = false;
      len = arguments.length;
      if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        i++;
      }
      if (!_this.is_object(target) && !_this.is_function(target)) {
        target = {};
      }
      args = Array.prototype.slice.call(arguments, i);
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        object = arg;
        for (key in object) {
          if (!__hasProp.call(object, key)) continue;
          value = object[key];
          if (target === value) {
            continue;
          }
          o = String(key);
          clone = value;
          src = target[key];
          if (deep && (clone != null) && (_this.is_raw_object(clone) || (a = _this.is_array(clone)))) {
            if (a) {
              a = false;
              copied_src = src && (_this.is_array(src) ? src : []);
            } else {
              copied_src = src && (_this.is_raw_object(src) ? src : {});
            }
            target[key] = _this.extend(deep, copied_src, clone);
          } else if (clone != null) {
            target[key] = clone;
          }
        }
      }
      return target;
    };
    this.to_hex = function(color) {
      var b, c, g, r;
      if (color.match(/^\#?[0-9a-fA-F]{6}|[0-9a-fA-F]{3}$/i)) {
        if (color.charAt(0 === '#')) {
          return color;
        } else {
          return '#' + color;
        }
      } else if (color.match(/^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/i)) {
        c = [parseInt(RegExp.$1, 10), parseInt(RegExp.$2, 10), parseInt(RegExp.$3, 10)];
        if (c.length === 3) {
          r = _this.zero_fill(c[0].toString(16, 2));
          g = _this.zero_fill(c[1].toString(16, 2));
          b = _this.zero_fill(c[2].toString(16, 2));
          return '#' + r + g + b;
        }
      } else {
        return false;
      }
    };
    this.to_rgb = function(color) {
      var b, c, g, r;
      if (color.match(/^rgb\s*\(\s*\d{1,3}\s*,\s*\d{1,3}\s*,\s*\d{1,3}\s*\)\s*$/)) {
        return color;
      } else if (color.match(/^\#?([0-9a-fA-F]{1,2})([0-9a-fA-F]{1,2})([0-9a-fA-F]{1,2})$/i)) {
        c = [parseInt(RegExp.$1, 16), parseInt(RegExp.$2, 16), parseInt(RegExp.$3, 16)];
        r = c[0].toString(10);
        g = c[1].toString(10);
        b = c[2].toString(10);
        return 'rgb(' + r + ',' + g + ',' + b + ')';
      } else {
        return false;
      }
    };
    this.strip_script = function(link) {
      var script;
      if (link.match(/^javascript:(\w\W.)/ || link.match(/(\w\W.)\((.*)\)/))) {
        script = RegExp.$1;
        console.log('Script stripped from link: ', script);
        return 'javascript:void(0)';
      } else {
        return link;
      }
    };
    this.wrap = function(e, fn) {
      var args, i;
      i = 2;
      if (e.preventDefault != null) {
        e.preventDefault();
        e.stopPropagation();
      } else {
        fn = e;
        i--;
      }
      args = Array.prototype.slice.call(arguments, i);
      return function() {
        return fn.apply(this, args);
      };
    };
    this.zero_fill = function(num, length) {
      return (Array(length).join('0') + num).slice(-length);
    };
    this._init = function() {
      _this._state.init = true;
      return _this;
    };
  }

  return Util;

})();

this.__apptools_preinit.abstract_base_classes.push(Util);

this.__apptools_preinit.deferred_core_modules.push({
  module: Util
});

window.Util = Util;

if (window._ != null) {
  window._cached = window._;
  window._ = null;
}

window._ = new Util();

if (window.$ != null) {
  $.extend({
    _: window._
  });
} else {
  window.$ = window._.get;
}
